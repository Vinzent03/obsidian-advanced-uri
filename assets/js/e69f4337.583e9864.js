"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[784],{5788:(e,t,n)=>{n.d(t,{Iu:()=>u,yg:()=>d});var r=n(1504);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),y=a,d=c["".concat(m,".").concat(y)]||c[y]||s[y]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},5136:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(5072),a=(n(1504),n(5788));const i={sidebar_position:7},o="Frontmatter",l={unversionedId:"actions/frontmatter",id:"actions/frontmatter",title:"Frontmatter",description:"The frontmatter of a file is the metadata at the beginning of a file. It is usually written in YAML format and is enclosed by ---.",source:"@site/docs/actions/frontmatter.md",sourceDirName:"actions",slug:"/actions/frontmatter",permalink:"/obsidian-advanced-uri/actions/frontmatter",draft:!1,editUrl:"https://github.com/Vinzent03/obsidian-advanced-uri/tree/master/docs/docs/actions/frontmatter.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"sidebar",previous:{title:"Settings Navigation",permalink:"/obsidian-advanced-uri/actions/settings_navigation"},next:{title:"Miscellaneous",permalink:"/obsidian-advanced-uri/actions/miscellaneous"}},m={},p=[{value:"<code>frontmatterkey</code> parameter structure",id:"frontmatterkey-parameter-structure",level:2},{value:"Simple Structure",id:"simple-structure",level:3},{value:"Complex Structure",id:"complex-structure",level:3},{value:"Read Frontmatter",id:"read-frontmatter",level:2},{value:"Write Frontmatter",id:"write-frontmatter",level:2},{value:"Simple Structure",id:"simple-structure-1",level:3},{value:"Complex Structure",id:"complex-structure-1",level:3}],u={toc:p},c="wrapper";function s(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.c)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"frontmatter"},"Frontmatter"),(0,a.yg)("p",null,"The frontmatter of a file is the metadata at the beginning of a file. It is usually written in YAML format and is enclosed by ",(0,a.yg)("inlineCode",{parentName:"p"},"---"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"---\ntitle: My Title\ntags: [tag1, tag2]\n---\n")),(0,a.yg)("p",null,"Actions on the frontmatter are done using the ",(0,a.yg)("inlineCode",{parentName:"p"},"frontmatterkey")," parameter."),(0,a.yg)("h2",{id:"frontmatterkey-parameter-structure"},(0,a.yg)("inlineCode",{parentName:"h2"},"frontmatterkey")," parameter structure"),(0,a.yg)("h3",{id:"simple-structure"},"Simple Structure"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"my_item: my_value\n")),(0,a.yg)("p",null,"To select the field ",(0,a.yg)("inlineCode",{parentName:"p"},"my_value")," set the parameter ",(0,a.yg)("inlineCode",{parentName:"p"},"frontmatterkey=my_item"),"."),(0,a.yg)("h3",{id:"complex-structure"},"Complex Structure"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"my_item:\n    second_item: my_value\n")),(0,a.yg)("p",null,"To select the field ",(0,a.yg)("inlineCode",{parentName:"p"},"my_value")," use ",(0,a.yg)("inlineCode",{parentName:"p"},"frontmatterkey=[my_item,second_item]"),".  The value of ",(0,a.yg)("inlineCode",{parentName:"p"},"frontmatterkey")," is the ordered list of keys to access your value to copy. Each key needs to be separated via ",(0,a.yg)("inlineCode",{parentName:"p"},","),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"my_item:\n    second_item:\n    - A\n    - B\n")),(0,a.yg)("p",null,"To select ",(0,a.yg)("inlineCode",{parentName:"p"},"B")," use ",(0,a.yg)("inlineCode",{parentName:"p"},"frontmatterkey=[my_item,second_item,1]"),", because ",(0,a.yg)("inlineCode",{parentName:"p"},"B")," is at index ",(0,a.yg)("inlineCode",{parentName:"p"},"1")," in the list."),(0,a.yg)("h2",{id:"read-frontmatter"},"Read Frontmatter"),(0,a.yg)("p",null,"You can copy values of your frontmatter to the clipboard using a ",(0,a.yg)("a",{parentName:"p",href:"/obsidian-advanced-uri/concepts/file_identifiers"},"file identifier")," and the ",(0,a.yg)("inlineCode",{parentName:"p"},"frontmatterkey")," paramteter."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Complete example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"obsidian://advanced-uri?vault=<vault>&filepath=MyFile&frontmatterkey=[my_item,second_item,1]\n")),(0,a.yg)("h2",{id:"write-frontmatter"},"Write Frontmatter"),(0,a.yg)("p",null,"You can also write to your frontmatter using the ",(0,a.yg)("inlineCode",{parentName:"p"},"frontmatterkey")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," parameter. If the key does not exist, it will be created."),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"data")," parameter is the value you want to write to the frontmatter field. It can be a string, a number, a boolean, a list, or any other JSON object."),(0,a.yg)("h3",{id:"simple-structure-1"},"Simple Structure"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Complete example:")),(0,a.yg)("p",null,"Before:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"my_item:\n  second_item:\n    - A\n    - B\n")),(0,a.yg)("p",null,"After:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"my_item:\n  second_item:\n    - A\n    - newValue\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"obsidian://advanced-uri?vault=<vault>&filepath=MyFile&frontmatterkey=[my_item,second_item,1]&data=NewValue\n")),(0,a.yg)("h3",{id:"complex-structure-1"},"Complex Structure"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Complete example:")),(0,a.yg)("p",null,"Before:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"my_item:\n  second_item:\n    - A\n    - B\n")),(0,a.yg)("p",null,"After:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"my_item:\n  second_item:\n    - A\n    - data:\n        - 2\n        - 3\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"obsidian://advanced-uri?vault=<vault>&filepath=MyFile&frontmatterkey=[my_item,second_item,1]&data={%22data%22:[2,3]}\n")))}s.isMDXComponent=!0}}]);